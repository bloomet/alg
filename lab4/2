import time


def generate_primes(n): #Генерация случ. чисел
    limit = 8000
    sieve = [True] * limit
    sieve[0:2] = [False, False]
    primes = []
    for i in range(2, limit):
        if sieve[i]:
            primes.append(i)
            if len(primes) >= n:
                break
            for j in range(i * i, limit, i):
                sieve[j] = False
    return primes


def naive_search(text, pattern): #Наивный алгоритм поиска (с учётом перекрытий)
    count = 0
    n, m = len(text), len(pattern)
    for i in range(n - m + 1):
        if text[i:i + m] == pattern:
            count += 1
    return count


def rabin_karp_search(text, pattern, base=256, mod=10 ** 9 + 7): #Алгоритм Рабина–Карпа
    n, m = len(text), len(pattern)
    if m > n:
        return 0
    # предварительные хеши
    h_p = 0
    h_t = 0
    power = 1
    for i in range(m):
        h_p = (h_p * base + ord(pattern[i])) % mod
        h_t = (h_t * base + ord(text[i])) % mod
        power = (power * base) % mod
    count = 0
    if h_t == h_p and text[:m] == pattern:
        count += 1
    for i in range(m, n):
        h_t = (h_t * base - ord(text[i - m]) * power + ord(text[i])) % mod
        if h_t < 0:
            h_t += mod
        if h_t == h_p and text[i - m + 1:i + 1] == pattern:
            count += 1
    return count


def boyer_moore_search(text, pattern): #Простейшая реализация правила плохого символа (вариант Хорспула)
    n, m = len(text), len(pattern)
    if m > n:
        return 0
    # таблица смещения
    shift = {ch: m for ch in set(text)}
    for i in range(m - 1):
        shift[pattern[i]] = m - 1 - i
    count = 0
    i = 0
    while i <= n - m:
        j = m - 1
        while j >= 0 and text[i + j] == pattern[j]:
            j -= 1
        if j < 0:
            count += 1
            i += m
        else:
            i += shift.get(text[i + j], m)
    return count


def kmp_search(text, pattern): #Алгоритм Кнута–Морриса–Пратта
    n, m = len(text), len(pattern)
    if m > n:
        return 0
    # префикс-функция
    lps = [0] * m
    length = 0
    for i in range(1, m):
        while length and pattern[i] != pattern[length]:
            length = lps[length - 1]
        if pattern[i] == pattern[length]:
            length += 1
            lps[i] = length
    # поиск
    count = 0
    j = 0
    for i in range(n):
        while j and text[i] != pattern[j]:
            j = lps[j - 1]
        if text[i] == pattern[j]:
            j += 1
            if j == m:
                count += 1
                j = lps[j - 1]
    return count


if __name__ == "__main__":
    primes = generate_primes(500)
    text = "".join(map(str, primes))
    patterns = [f"{i:02d}" for i in range(10, 100)]

    algorithms = {
        "Naive": naive_search,
        "Rabin-Karp": rabin_karp_search,
        "Boyer-Moore": boyer_moore_search,
        "KMP": kmp_search
    }

    results = {}
    for name, func in algorithms.items():
        start = time.perf_counter()
        counts = {pat: func(text, pat) for pat in patterns}
        elapsed = time.perf_counter() - start
        max_count = max(counts.values())
        most_freq = [pat for pat, cnt in counts.items() if cnt == max_count]
        results[name] = (most_freq, max_count, elapsed)

    # вывод результатов
    for name, (patterns, count, duration) in results.items():
        print(f"{name}: наиболее частые {patterns} встречаются {count} раз; время поиска {duration:.4f} сек.")
